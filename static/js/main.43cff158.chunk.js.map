{"version":3,"sources":["components/show.js","components/additem.js","App.js","serviceWorker.js","index.js"],"names":["Show","item1","this","props","delete1","theitem","length","map","item2","key","id","name","age","onClick","colSpan","Component","Add","state","handlevalue","e","setState","target","value","handlesubmit","preventDefault","additem","type","placeholder","onChange","App","deleteitem","x","y","findIndex","item","splice","z","s","push","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAEaA,G,MAAb,uKACa,IACEC,EAASC,KAAKC,MAAdF,MACAG,EAAWF,KAAKC,MAAhBC,QAEDC,EADSJ,EAAMK,OACML,EAAMM,KAAI,SAAAC,GACjC,OACI,wBAAIC,IAAKD,EAAME,IACX,4BAAKF,EAAMG,MACX,4BAAKH,EAAMI,KACX,4BAAI,4BAAQC,QAAS,kBAAMT,EAAQI,EAAME,MAArC,aAKZ,4BACA,wBAAII,QAAQ,KAAZ,8BAGJ,OACI,kBAAC,WAAD,KACI,4BACI,oCACA,mCACA,uCAEHT,OA1BjB,GAA0BU,c,OCAbC,EAAb,4MAEIC,MAAQ,CACJN,KAAO,GACPC,IAAM,IAJd,EAOIM,YAAc,SAACC,GACX,EAAKC,SAAL,eAGKD,EAAEE,OAAOX,GAAMS,EAAEE,OAAOC,SAXrC,EAeIC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKrB,MAAMsB,QAAQ,EAAKR,OACxB,EAAKG,SAAS,CACVT,KAAO,GACPC,IAAM,MApBlB,uDA0BQ,OACI,4BACI,4BAAI,2BAAOc,KAAK,OAAOC,YAAY,kBAAkBjB,GAAG,OAAOY,MAAOpB,KAAKe,MAAMN,KAAMiB,SAAU1B,KAAKgB,eACtG,4BAAI,2BAAOQ,KAAK,SAASC,YAAY,iBAAiBL,MAAOpB,KAAKe,MAAML,IAAKF,GAAG,MAAMkB,SAAU1B,KAAKgB,eACrG,4BAAI,2BAAOQ,KAAK,SAASJ,MAAM,WAAWT,QAASX,KAAKqB,qBA9BxE,GAAyBR,aC2CVc,E,4MAvCbZ,MAAQ,CACNhB,MAAQ,I,EAGV6B,WAAa,SAACpB,GACZ,IAAMqB,EAAI,EAAKd,MAAMhB,MACf+B,EAAID,EAAEE,WAAU,SAAAC,GAAI,OAAIA,EAAKxB,KAAOA,KAC1CqB,EAAEI,OAAOH,EAAE,GACX,EAAKZ,SAAS,CACZW,EAAIA,K,EAIRN,QAAU,SAACW,GACT,IAAML,EAAI,EAAKd,MAAMhB,MACfoC,EAAIN,EAAEzB,OAAS,EACrB8B,EAAE1B,GAAK2B,EACPN,EAAEO,KAAKF,GACP,EAAKhB,SAAS,CACZW,EAAEA,K,uDAMN,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,aACf,6CAAsB,6BACtB,+BACA,kBAAC,EAAD,CAAMtC,MAASC,KAAKe,MAAMhB,MAAOG,QAASF,KAAK4B,aAC/C,kBAAC,EAAD,CAAKL,QAASvB,KAAKuB,iB,GAhCPV,aCOEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.43cff158.chunk.js","sourcesContent":["import React, { Component,Fragment } from 'react';\r\nimport {bake_cookie,read_cookie} from 'sfcookies'\r\nexport class Show extends Component {\r\n    render(){\r\n        const {item1} = this.props;\r\n        const {delete1} = this.props;\r\n        const length = item1.length;\r\n        const theitem = length ? ( item1.map(item2 => {\r\n            return(\r\n                <tr key={item2.id}>\r\n                    <td>{item2.name}</td>\r\n                    <td>{item2.age}</td>\r\n                    <td><button onClick={() => delete1(item2.id)}>&times;</button></td>\r\n                </tr>\r\n            );\r\n         })\r\n        ) : (\r\n            <tr>\r\n            <td colSpan=\"3\">There're No Items To Show</td>\r\n            </tr>\r\n        )\r\n        return(\r\n            <Fragment>\r\n                <tr>\r\n                    <td>NAME</td>\r\n                    <td>AGE</td>\r\n                    <td>DELETE</td>\r\n                </tr>\r\n                {theitem}\r\n            </Fragment>\r\n        );\r\n    }\r\n}","import React, { Component,Fragment } from 'react';\r\n\r\nexport class Add extends Component {\r\n\r\n    state = {\r\n        name : '',\r\n        age : ''\r\n    }\r\n\r\n    handlevalue = (e) => {\r\n        this.setState({\r\n            //name : e.target.value,\r\n            //age : e.target.value\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n\r\n    handlesubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.additem(this.state);\r\n        this.setState({\r\n            name : '',\r\n            age : ''\r\n            //[e.target.id] : e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <tr>\r\n                <td><input type=\"text\" placeholder=\"enter your name\" id=\"name\" value={this.state.name} onChange={this.handlevalue} /></td>\r\n                <td><input type=\"number\" placeholder=\"enter your age\" value={this.state.age} id=\"age\" onChange={this.handlevalue} /></td>\r\n                <td><input type=\"submit\" value=\"Add Item\" onClick={this.handlesubmit} /></td>\r\n           </tr>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport {Show} from './components/show'\nimport {Add} from './components/additem'\n\nlet reminders = [];\nclass App extends Component {\n  state = {\n    item1 : [\n    ]\n  }\n  deleteitem = (id) => {\n    const x = this.state.item1;\n    const y = x.findIndex(item => item.id === id)\n    x.splice(y,1)\n    this.setState({\n      x : x\n    })\n  }\n \n  additem = (z) => {\n    const x = this.state.item1;\n    const s = x.length + 1;\n    z.id = s;\n    x.push(z);\n    this.setState({\n      x:x\n    })\n  }\n\n  render()\n  {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n      <h1>TODO-LIST APP</h1><br />\n      <table>\n      <Show item1 = {this.state.item1} delete1={this.deleteitem}/>\n      <Add additem={this.additem} />\n      </table>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}